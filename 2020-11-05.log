2020-11-05 22:40:27: uncaughtException: listen EADDRINUSE: address already in use :::4000, stack: Error: listen EADDRINUSE: address already in use :::4000
    at Server.setupListenHandle [as _listen2] (net.js:1317:16)
    at listenInCluster (net.js:1365:12)
    at Server.listen (net.js:1451:7)
    at Function.listen (C:\development\JS-Lessons\RS_School\RS-Node.js-2020Q3\rss-nodejs\node_modules\express\lib\application.js:618:24)
    at C:\development\JS-Lessons\RS_School\RS-Node.js-2020Q3\rss-nodejs\src\server.js:15:14
    at NativeConnection.<anonymous> (C:\development\JS-Lessons\RS_School\RS-Node.js-2020Q3\rss-nodejs\src\mongoDB\db.client.js:19:25)
    at Object.onceWrapper (events.js:420:28)
    at NativeConnection.emit (events.js:314:20)
    at _setClient (C:\development\JS-Lessons\RS_School\RS-Node.js-2020Q3\rss-nodejs\node_modules\mongoose\lib\connection.js:947:8)
    at C:\development\JS-Lessons\RS_School\RS-Node.js-2020Q3\rss-nodejs\node_modules\mongoose\lib\connection.js:794:7
    at C:\development\JS-Lessons\RS_School\RS-Node.js-2020Q3\rss-nodejs\node_modules\mongodb\lib\utils.js:674:5
    at C:\development\JS-Lessons\RS_School\RS-Node.js-2020Q3\rss-nodejs\node_modules\mongodb\lib\mongo_client.js:225:7
    at connectCallback (C:\development\JS-Lessons\RS_School\RS-Node.js-2020Q3\rss-nodejs\node_modules\mongodb\lib\operations\connect.js:366:5)
    at C:\development\JS-Lessons\RS_School\RS-Node.js-2020Q3\rss-nodejs\node_modules\mongodb\lib\operations\connect.js:602:5
    at connectHandler (C:\development\JS-Lessons\RS_School\RS-Node.js-2020Q3\rss-nodejs\node_modules\mongodb\lib\core\sdam\topology.js:297:43)
    at cb (C:\development\JS-Lessons\RS_School\RS-Node.js-2020Q3\rss-nodejs\node_modules\mongodb\lib\core\sdam\topology.js:681:26)
2020-11-05 22:41:16: (401) GET: /users, query params: {}, request body: {}
2020-11-05 22:41:16: (401) GET: /users/123, query params: {}, request body: {}
2020-11-05 22:41:16: (401) POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}
2020-11-05 22:41:16: (401) GET: /boards/12345/tasks, query params: {}, request body: {}
2020-11-05 22:41:16: (401) GET: /boards, query params: {}, request body: {}
2020-11-05 22:41:16: (401) PUT: /users/12345, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}
2020-11-05 22:41:16: (401) GET: /boards/12345/tasks/12345, query params: {}, request body: {}
2020-11-05 22:41:16: (401) GET: /boards/12345, query params: {}, request body: {}
2020-11-05 22:41:16: (401) DELETE: /users/12345, query params: {}, request body: {}
2020-11-05 22:41:16: (401) POST: /boards/12345/tasks, query params: {}, request body: {"title":"Autotest task","order":0,"description":"Lorem ipsum","userId":null,"boardId":null,"columnId":null}
2020-11-05 22:41:16: (401) POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}
2020-11-05 22:41:16: (401) PUT: /boards/12345/tasks/12345, query params: {}, request body: {"title":"Autotest task","order":0,"description":"Lorem ipsum","userId":null,"boardId":null,"columnId":null}
2020-11-05 22:41:16: (401) PUT: /boards/12345, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}
2020-11-05 22:41:16: (401) DELETE: /boards/12345/tasks/12345, query params: {}, request body: {}
2020-11-05 22:41:16: (401) DELETE: /boards/12345, query params: {}, request body: {}
2020-11-05 22:41:17: (403) POST: /login, query params: {}, request body: {"login":"admin","password":"admin"}
2020-11-05 22:41:17: () POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}, message: jwt malformed
2020-11-05 22:41:17: (500) POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}
2020-11-05 22:41:17: () POST: /boards/undefined/tasks, query params: {}, request body: {"title":"Autotest task","order":0,"description":"Lorem ipsum","userId":null,"boardId":null,"columnId":null}, message: jwt malformed
2020-11-05 22:41:17: (500) POST: /boards/undefined/tasks, query params: {}, request body: {"title":"Autotest task","order":0,"description":"Lorem ipsum","userId":null,"boardId":null,"columnId":null}
2020-11-05 22:41:17: () GET: /boards/undefined/tasks, query params: {}, request body: {}, message: jwt malformed
2020-11-05 22:41:17: (500) GET: /boards/undefined/tasks, query params: {}, request body: {}
2020-11-05 22:41:17: (403) POST: /login, query params: {}, request body: {"login":"admin","password":"admin"}
2020-11-05 22:41:17: () GET: /boards/undefined/tasks, query params: {}, request body: {}, message: jwt malformed
2020-11-05 22:41:17: (500) GET: /boards/undefined/tasks, query params: {}, request body: {}
2020-11-05 22:41:17: () POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}, message: jwt malformed
2020-11-05 22:41:17: (500) POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}
2020-11-05 22:41:17: () POST: /boards/undefined/tasks, query params: {}, request body: {"title":"Autotest task","order":0,"description":"Lorem ipsum","userId":null,"boardId":null,"columnId":null}, message: jwt malformed
2020-11-05 22:41:17: (500) POST: /boards/undefined/tasks, query params: {}, request body: {"title":"Autotest task","order":0,"description":"Lorem ipsum","userId":null,"boardId":null,"columnId":null}
2020-11-05 22:41:17: () GET: /boards, query params: {}, request body: {}, message: jwt malformed
2020-11-05 22:41:17: (500) GET: /boards, query params: {}, request body: {}
2020-11-05 22:41:17: () POST: /boards/undefined/tasks, query params: {}, request body: {"title":"Autotest task","order":0,"description":"Lorem ipsum","userId":null,"boardId":null,"columnId":null}, message: jwt malformed
2020-11-05 22:41:17: (500) POST: /boards/undefined/tasks, query params: {}, request body: {"title":"Autotest task","order":0,"description":"Lorem ipsum","userId":null,"boardId":null,"columnId":null}
2020-11-05 22:41:17: () GET: /boards, query params: {}, request body: {}, message: jwt malformed
2020-11-05 22:41:17: (500) GET: /boards, query params: {}, request body: {}
2020-11-05 22:41:17: (403) POST: /login, query params: {}, request body: {"login":"admin","password":"admin"}
2020-11-05 22:41:17: () PUT: /boards/undefined/tasks/undefined, query params: {}, request body: {"0":"I","1":"n","2":"t","3":"e","4":"r","5":"n","6":"a","7":"l","8":" ","9":"S","10":"e","11":"r","12":"v","13":"e","14":"r","15":" ","16":"E","17":"r","18":"r","19":"o","20":"r","title":"Autotest updated task"}, message: jwt malformed
2020-11-05 22:41:17: (500) PUT: /boards/undefined/tasks/undefined, query params: {}, request body: {"0":"I","1":"n","2":"t","3":"e","4":"r","5":"n","6":"a","7":"l","8":" ","9":"S","10":"e","11":"r","12":"v","13":"e","14":"r","15":" ","16":"E","17":"r","18":"r","19":"o","20":"r","title":"Autotest updated task"}
2020-11-05 22:41:17: () POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}, message: jwt malformed
2020-11-05 22:41:17: (500) POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}
2020-11-05 22:41:17: () GET: /users, query params: {}, request body: {}, message: jwt malformed
2020-11-05 22:41:17: (500) GET: /users, query params: {}, request body: {}
2020-11-05 22:41:17: () GET: /boards/undefined/tasks/undefined, query params: {}, request body: {}, message: jwt malformed
2020-11-05 22:41:17: (500) GET: /boards/undefined/tasks/undefined, query params: {}, request body: {}
2020-11-05 22:41:17: () POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}, message: jwt malformed
2020-11-05 22:41:17: (500) POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}
2020-11-05 22:41:17: () POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}, message: jwt malformed
2020-11-05 22:41:17: (500) POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}
2020-11-05 22:41:17: () DELETE: /boards/undefined, query params: {}, request body: {}, message: jwt malformed
2020-11-05 22:41:17: (500) DELETE: /boards/undefined, query params: {}, request body: {}
2020-11-05 22:41:17: () PUT: /boards/undefined, query params: {}, request body: {"0":"I","1":"n","2":"t","3":"e","4":"r","5":"n","6":"a","7":"l","8":" ","9":"S","10":"e","11":"r","12":"v","13":"e","14":"r","15":" ","16":"E","17":"r","18":"r","19":"o","20":"r","title":"Autotest updated board"}, message: jwt malformed
2020-11-05 22:41:17: (500) PUT: /boards/undefined, query params: {}, request body: {"0":"I","1":"n","2":"t","3":"e","4":"r","5":"n","6":"a","7":"l","8":" ","9":"S","10":"e","11":"r","12":"v","13":"e","14":"r","15":" ","16":"E","17":"r","18":"r","19":"o","20":"r","title":"Autotest updated board"}
2020-11-05 22:41:17: () POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}, message: jwt malformed
2020-11-05 22:41:17: (500) POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}
2020-11-05 22:41:17: () POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}, message: jwt malformed
2020-11-05 22:41:17: (500) POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}
2020-11-05 22:41:17: () POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}, message: jwt malformed
2020-11-05 22:41:17: (500) POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}
2020-11-05 22:41:17: () POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}, message: jwt malformed
2020-11-05 22:41:17: (500) POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}
2020-11-05 22:41:17: () PUT: /users/undefined, query params: {}, request body: {"name":"Autotest updated TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}, message: jwt malformed
2020-11-05 22:41:17: (500) PUT: /users/undefined, query params: {}, request body: {"name":"Autotest updated TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}
2020-11-05 22:41:17: () DELETE: /boards/undefined, query params: {}, request body: {}, message: jwt malformed
2020-11-05 22:41:17: (500) DELETE: /boards/undefined, query params: {}, request body: {}
2020-11-05 22:41:17: () POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}, message: jwt malformed
2020-11-05 22:41:17: (500) POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}
2020-11-05 22:41:17: () DELETE: /users/undefined, query params: {}, request body: {}, message: jwt malformed
2020-11-05 22:41:17: (500) DELETE: /users/undefined, query params: {}, request body: {}
2020-11-05 22:41:17: () POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}, message: jwt malformed
2020-11-05 22:41:17: (500) POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}
2020-11-05 22:42:56: (401) POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}
2020-11-05 22:42:56: (401) GET: /boards, query params: {}, request body: {}
2020-11-05 22:42:56: (401) GET: /boards, query params: {}, request body: {}
2020-11-05 22:42:56: (401) POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}
2020-11-05 22:42:56: (401) POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}
2020-11-05 22:42:56: (401) GET: /users, query params: {}, request body: {}
2020-11-05 22:42:56: (401) PUT: /boards/undefined, query params: {}, request body: {"0":"U","1":"n","2":"a","3":"u","4":"t","5":"h","6":"o","7":"r","8":"i","9":"z","10":"e","11":"d","title":"Autotest updated board"}
2020-11-05 22:42:56: (401) POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}
2020-11-05 22:42:56: (401) POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}
2020-11-05 22:42:56: (401) POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}
2020-11-05 22:42:56: (401) POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}
2020-11-05 22:42:56: (401) DELETE: /boards/undefined, query params: {}, request body: {}
2020-11-05 22:42:57: (401) POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}
2020-11-05 22:42:57: (401) PUT: /users/undefined, query params: {}, request body: {"name":"Autotest updated TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}
2020-11-05 22:42:57: (401) POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}
2020-11-05 22:42:57: (401) DELETE: /users/undefined, query params: {}, request body: {}
2020-11-05 22:42:57: (401) POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}
2020-11-05 22:42:57: (401) POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}
2020-11-05 22:42:57: (401) POST: /boards/undefined/tasks, query params: {}, request body: {"title":"Autotest task","order":0,"description":"Lorem ipsum","userId":null,"boardId":null,"columnId":null}
2020-11-05 22:42:57: (401) GET: /boards/undefined/tasks, query params: {}, request body: {}
2020-11-05 22:42:57: (401) GET: /boards/undefined/tasks, query params: {}, request body: {}
2020-11-05 22:42:57: (401) POST: /boards/undefined/tasks, query params: {}, request body: {"title":"Autotest task","order":0,"description":"Lorem ipsum","userId":null,"boardId":null,"columnId":null}
2020-11-05 22:42:57: (401) POST: /boards/undefined/tasks, query params: {}, request body: {"title":"Autotest task","order":0,"description":"Lorem ipsum","userId":null,"boardId":null,"columnId":null}
2020-11-05 22:42:57: (401) PUT: /boards/undefined/tasks/undefined, query params: {}, request body: {"0":"U","1":"n","2":"a","3":"u","4":"t","5":"h","6":"o","7":"r","8":"i","9":"z","10":"e","11":"d","title":"Autotest updated task"}
2020-11-05 22:42:57: (401) GET: /boards/undefined/tasks/undefined, query params: {}, request body: {}
2020-11-05 22:42:57: (401) DELETE: /boards/undefined, query params: {}, request body: {}
2020-11-05 22:42:58: (401) GET: /boards, query params: {}, request body: {}
2020-11-05 22:42:58: (401) GET: /boards/12345, query params: {}, request body: {}
2020-11-05 22:42:58: (401) POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}
2020-11-05 22:42:58: (401) PUT: /boards/12345, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}
2020-11-05 22:42:58: (401) DELETE: /boards/12345, query params: {}, request body: {}
2020-11-05 22:42:58: (401) GET: /users, query params: {}, request body: {}
2020-11-05 22:42:58: (401) GET: /users/123, query params: {}, request body: {}
2020-11-05 22:42:58: (401) POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}
2020-11-05 22:42:58: (401) PUT: /users/12345, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}
2020-11-05 22:42:58: (401) DELETE: /users/12345, query params: {}, request body: {}
2020-11-05 22:42:58: (401) GET: /boards/12345/tasks, query params: {}, request body: {}
2020-11-05 22:42:58: (401) GET: /boards/12345/tasks/12345, query params: {}, request body: {}
2020-11-05 22:42:58: (401) POST: /boards/12345/tasks, query params: {}, request body: {"title":"Autotest task","order":0,"description":"Lorem ipsum","userId":null,"boardId":null,"columnId":null}
2020-11-05 22:42:58: (401) PUT: /boards/12345/tasks/12345, query params: {}, request body: {"title":"Autotest task","order":0,"description":"Lorem ipsum","userId":null,"boardId":null,"columnId":null}
2020-11-05 22:42:58: (401) DELETE: /boards/12345/tasks/12345, query params: {}, request body: {}
2020-11-05 22:47:15: (403) POST: /login, query params: {}, request body: {"login":"admin","password":"admin"}
2020-11-05 22:47:15: () POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}, message: jwt malformed
2020-11-05 22:47:15: (500) POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}
2020-11-05 22:47:15: () GET: /boards, query params: {}, request body: {}, message: jwt malformed
2020-11-05 22:47:15: (500) GET: /boards, query params: {}, request body: {}
2020-11-05 22:47:15: () GET: /boards, query params: {}, request body: {}, message: jwt malformed
2020-11-05 22:47:15: (500) GET: /boards, query params: {}, request body: {}
2020-11-05 22:47:15: (403) POST: /login, query params: {}, request body: {"login":"admin","password":"admin"}
2020-11-05 22:47:15: () POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}, message: jwt malformed
2020-11-05 22:47:15: (500) POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}
2020-11-05 22:47:15: () POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}, message: jwt malformed
2020-11-05 22:47:15: (500) POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}
2020-11-05 22:47:15: () GET: /users, query params: {}, request body: {}, message: jwt malformed
2020-11-05 22:47:15: (500) GET: /users, query params: {}, request body: {}
2020-11-05 22:47:15: () PUT: /boards/undefined, query params: {}, request body: {"0":"I","1":"n","2":"t","3":"e","4":"r","5":"n","6":"a","7":"l","8":" ","9":"S","10":"e","11":"r","12":"v","13":"e","14":"r","15":" ","16":"E","17":"r","18":"r","19":"o","20":"r","title":"Autotest updated board"}, message: jwt malformed
2020-11-05 22:47:15: (500) PUT: /boards/undefined, query params: {}, request body: {"0":"I","1":"n","2":"t","3":"e","4":"r","5":"n","6":"a","7":"l","8":" ","9":"S","10":"e","11":"r","12":"v","13":"e","14":"r","15":" ","16":"E","17":"r","18":"r","19":"o","20":"r","title":"Autotest updated board"}
2020-11-05 22:47:15: () POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}, message: jwt malformed
2020-11-05 22:47:15: (500) POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}
2020-11-05 22:47:15: () POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}, message: jwt malformed
2020-11-05 22:47:15: (500) POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}
2020-11-05 22:47:15: () POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}, message: jwt malformed
2020-11-05 22:47:15: (500) POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}
2020-11-05 22:47:15: () POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}, message: jwt malformed
2020-11-05 22:47:15: (500) POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}
2020-11-05 22:47:15: () POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}, message: jwt malformed
2020-11-05 22:47:15: (500) POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}
2020-11-05 22:47:15: () DELETE: /boards/undefined, query params: {}, request body: {}, message: jwt malformed
2020-11-05 22:47:15: (500) DELETE: /boards/undefined, query params: {}, request body: {}
2020-11-05 22:47:15: () PUT: /users/undefined, query params: {}, request body: {"name":"Autotest updated TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}, message: jwt malformed
2020-11-05 22:47:16: (500) PUT: /users/undefined, query params: {}, request body: {"name":"Autotest updated TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}
2020-11-05 22:47:16: () POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}, message: jwt malformed
2020-11-05 22:47:16: (500) POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}
2020-11-05 22:47:16: (403) POST: /login, query params: {}, request body: {"login":"admin","password":"admin"}
2020-11-05 22:47:16: () DELETE: /users/undefined, query params: {}, request body: {}, message: jwt malformed
2020-11-05 22:47:16: (500) DELETE: /users/undefined, query params: {}, request body: {}
2020-11-05 22:47:16: () POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}, message: jwt malformed
2020-11-05 22:47:16: (500) POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}
2020-11-05 22:47:16: () POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}, message: jwt malformed
2020-11-05 22:47:16: (500) POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}
2020-11-05 22:47:16: () POST: /boards/undefined/tasks, query params: {}, request body: {"title":"Autotest task","order":0,"description":"Lorem ipsum","userId":null,"boardId":null,"columnId":null}, message: jwt malformed
2020-11-05 22:47:16: (500) POST: /boards/undefined/tasks, query params: {}, request body: {"title":"Autotest task","order":0,"description":"Lorem ipsum","userId":null,"boardId":null,"columnId":null}
2020-11-05 22:47:16: () GET: /boards/undefined/tasks, query params: {}, request body: {}, message: jwt malformed
2020-11-05 22:47:16: (500) GET: /boards/undefined/tasks, query params: {}, request body: {}
2020-11-05 22:47:16: () GET: /boards/undefined/tasks, query params: {}, request body: {}, message: jwt malformed
2020-11-05 22:47:16: (500) GET: /boards/undefined/tasks, query params: {}, request body: {}
2020-11-05 22:47:16: () POST: /boards/undefined/tasks, query params: {}, request body: {"title":"Autotest task","order":0,"description":"Lorem ipsum","userId":null,"boardId":null,"columnId":null}, message: jwt malformed
2020-11-05 22:47:16: (500) POST: /boards/undefined/tasks, query params: {}, request body: {"title":"Autotest task","order":0,"description":"Lorem ipsum","userId":null,"boardId":null,"columnId":null}
2020-11-05 22:47:16: () POST: /boards/undefined/tasks, query params: {}, request body: {"title":"Autotest task","order":0,"description":"Lorem ipsum","userId":null,"boardId":null,"columnId":null}, message: jwt malformed
2020-11-05 22:47:16: (500) POST: /boards/undefined/tasks, query params: {}, request body: {"title":"Autotest task","order":0,"description":"Lorem ipsum","userId":null,"boardId":null,"columnId":null}
2020-11-05 22:47:16: () PUT: /boards/undefined/tasks/undefined, query params: {}, request body: {"0":"I","1":"n","2":"t","3":"e","4":"r","5":"n","6":"a","7":"l","8":" ","9":"S","10":"e","11":"r","12":"v","13":"e","14":"r","15":" ","16":"E","17":"r","18":"r","19":"o","20":"r","title":"Autotest updated task"}, message: jwt malformed
2020-11-05 22:47:16: (500) PUT: /boards/undefined/tasks/undefined, query params: {}, request body: {"0":"I","1":"n","2":"t","3":"e","4":"r","5":"n","6":"a","7":"l","8":" ","9":"S","10":"e","11":"r","12":"v","13":"e","14":"r","15":" ","16":"E","17":"r","18":"r","19":"o","20":"r","title":"Autotest updated task"}
2020-11-05 22:47:16: () GET: /boards/undefined/tasks/undefined, query params: {}, request body: {}, message: jwt malformed
2020-11-05 22:47:16: (500) GET: /boards/undefined/tasks/undefined, query params: {}, request body: {}
2020-11-05 22:47:16: () DELETE: /boards/undefined, query params: {}, request body: {}, message: jwt malformed
2020-11-05 22:47:16: (500) DELETE: /boards/undefined, query params: {}, request body: {}
2020-11-05 22:47:17: (401) GET: /users, query params: {}, request body: {}
2020-11-05 22:47:17: (401) GET: /users/123, query params: {}, request body: {}
2020-11-05 22:47:17: (401) POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}
2020-11-05 22:47:17: (401) PUT: /users/12345, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}
2020-11-05 22:47:17: (401) DELETE: /users/12345, query params: {}, request body: {}
2020-11-05 22:47:17: (401) GET: /boards, query params: {}, request body: {}
2020-11-05 22:47:17: (401) GET: /boards/12345, query params: {}, request body: {}
2020-11-05 22:47:17: (401) POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}
2020-11-05 22:47:17: (401) PUT: /boards/12345, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}
2020-11-05 22:47:17: (401) DELETE: /boards/12345, query params: {}, request body: {}
2020-11-05 22:47:17: (401) GET: /boards/12345/tasks, query params: {}, request body: {}
2020-11-05 22:47:17: (401) GET: /boards/12345/tasks/12345, query params: {}, request body: {}
2020-11-05 22:47:17: (401) POST: /boards/12345/tasks, query params: {}, request body: {"title":"Autotest task","order":0,"description":"Lorem ipsum","userId":null,"boardId":null,"columnId":null}
2020-11-05 22:47:17: (401) PUT: /boards/12345/tasks/12345, query params: {}, request body: {"title":"Autotest task","order":0,"description":"Lorem ipsum","userId":null,"boardId":null,"columnId":null}
2020-11-05 22:47:17: (401) DELETE: /boards/12345/tasks/12345, query params: {}, request body: {}
2020-11-05 22:52:19: uncaughtException: promise rejection The `uri` parameter to `openUri()` must be a string, got "undefined". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string., stack: MongooseError: The `uri` parameter to `openUri()` must be a string, got "undefined". Make sure the first parameter to `mongoose.connect()` or `mongoose.createConnection()` is a string.
    at NativeConnection.Connection.openUri (C:\development\JS-Lessons\RS_School\RS-Node.js-2020Q3\rss-nodejs\node_modules\mongoose\lib\connection.js:651:11)
    at C:\development\JS-Lessons\RS_School\RS-Node.js-2020Q3\rss-nodejs\node_modules\mongoose\lib\index.js:342:10
    at C:\development\JS-Lessons\RS_School\RS-Node.js-2020Q3\rss-nodejs\node_modules\mongoose\lib\helpers\promiseOrCallback.js:31:5
    at new Promise (<anonymous>)
    at promiseOrCallback (C:\development\JS-Lessons\RS_School\RS-Node.js-2020Q3\rss-nodejs\node_modules\mongoose\lib\helpers\promiseOrCallback.js:30:10)
    at Mongoose.connect (C:\development\JS-Lessons\RS_School\RS-Node.js-2020Q3\rss-nodejs\node_modules\mongoose\lib\index.js:341:10)
    at connectToDB (C:\development\JS-Lessons\RS_School\RS-Node.js-2020Q3\rss-nodejs\src\mongoDB\db.client.js:5:12)
    at Object.<anonymous> (C:\development\JS-Lessons\RS_School\RS-Node.js-2020Q3\rss-nodejs\src\server.js:14:1)
    at Module._compile (internal/modules/cjs/loader.js:1085:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1114:10)
    at Module.load (internal/modules/cjs/loader.js:950:32)
    at Function.Module._load (internal/modules/cjs/loader.js:791:14)
    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)
    at internal/main/run_main_module.js:17:47
2020-11-05 22:54:35: (403) POST: /login, query params: {}, request body: {"login":"admin","password":"admin"}
2020-11-05 22:54:35: () GET: /users, query params: {}, request body: {}, message: jwt malformed
2020-11-05 22:54:35: (500) GET: /users, query params: {}, request body: {}
2020-11-05 22:54:35: () POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}, message: jwt malformed
2020-11-05 22:54:35: (500) POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}
2020-11-05 22:54:35: () POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}, message: jwt malformed
2020-11-05 22:54:35: (500) POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}
2020-11-05 22:54:35: () POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}, message: jwt malformed
2020-11-05 22:54:35: (500) POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}
2020-11-05 22:54:35: () PUT: /users/undefined, query params: {}, request body: {"name":"Autotest updated TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}, message: jwt malformed
2020-11-05 22:54:35: (500) PUT: /users/undefined, query params: {}, request body: {"name":"Autotest updated TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}
2020-11-05 22:54:35: () POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}, message: jwt malformed
2020-11-05 22:54:35: (500) POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}
2020-11-05 22:54:35: () DELETE: /users/undefined, query params: {}, request body: {}, message: jwt malformed
2020-11-05 22:54:35: (500) DELETE: /users/undefined, query params: {}, request body: {}
2020-11-05 22:54:35: (403) POST: /login, query params: {}, request body: {"login":"admin","password":"admin"}
2020-11-05 22:54:35: () POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}, message: jwt malformed
2020-11-05 22:54:35: (500) POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}
2020-11-05 22:54:35: () POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}, message: jwt malformed
2020-11-05 22:54:35: (500) POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}
2020-11-05 22:54:35: () POST: /boards/undefined/tasks, query params: {}, request body: {"title":"Autotest task","order":0,"description":"Lorem ipsum","userId":null,"boardId":null,"columnId":null}, message: jwt malformed
2020-11-05 22:54:35: (500) POST: /boards/undefined/tasks, query params: {}, request body: {"title":"Autotest task","order":0,"description":"Lorem ipsum","userId":null,"boardId":null,"columnId":null}
2020-11-05 22:54:35: () GET: /boards/undefined/tasks, query params: {}, request body: {}, message: jwt malformed
2020-11-05 22:54:35: (500) GET: /boards/undefined/tasks, query params: {}, request body: {}
2020-11-05 22:54:35: () GET: /boards/undefined/tasks, query params: {}, request body: {}, message: jwt malformed
2020-11-05 22:54:35: (500) GET: /boards/undefined/tasks, query params: {}, request body: {}
2020-11-05 22:54:35: (403) POST: /login, query params: {}, request body: {"login":"admin","password":"admin"}
2020-11-05 22:54:35: () POST: /boards/undefined/tasks, query params: {}, request body: {"title":"Autotest task","order":0,"description":"Lorem ipsum","userId":null,"boardId":null,"columnId":null}, message: jwt malformed
2020-11-05 22:54:35: (500) POST: /boards/undefined/tasks, query params: {}, request body: {"title":"Autotest task","order":0,"description":"Lorem ipsum","userId":null,"boardId":null,"columnId":null}
2020-11-05 22:54:35: () POST: /boards/undefined/tasks, query params: {}, request body: {"title":"Autotest task","order":0,"description":"Lorem ipsum","userId":null,"boardId":null,"columnId":null}, message: jwt malformed
2020-11-05 22:54:35: (500) POST: /boards/undefined/tasks, query params: {}, request body: {"title":"Autotest task","order":0,"description":"Lorem ipsum","userId":null,"boardId":null,"columnId":null}
2020-11-05 22:54:35: () POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}, message: jwt malformed
2020-11-05 22:54:35: (500) POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}
2020-11-05 22:54:35: () PUT: /boards/undefined/tasks/undefined, query params: {}, request body: {"0":"I","1":"n","2":"t","3":"e","4":"r","5":"n","6":"a","7":"l","8":" ","9":"S","10":"e","11":"r","12":"v","13":"e","14":"r","15":" ","16":"E","17":"r","18":"r","19":"o","20":"r","title":"Autotest updated task"}, message: jwt malformed
2020-11-05 22:54:35: (500) PUT: /boards/undefined/tasks/undefined, query params: {}, request body: {"0":"I","1":"n","2":"t","3":"e","4":"r","5":"n","6":"a","7":"l","8":" ","9":"S","10":"e","11":"r","12":"v","13":"e","14":"r","15":" ","16":"E","17":"r","18":"r","19":"o","20":"r","title":"Autotest updated task"}
2020-11-05 22:54:35: () GET: /boards, query params: {}, request body: {}, message: jwt malformed
2020-11-05 22:54:35: (500) GET: /boards, query params: {}, request body: {}
2020-11-05 22:54:35: () GET: /boards/undefined/tasks/undefined, query params: {}, request body: {}, message: jwt malformed
2020-11-05 22:54:36: (500) GET: /boards/undefined/tasks/undefined, query params: {}, request body: {}
2020-11-05 22:54:36: () GET: /boards, query params: {}, request body: {}, message: jwt malformed
2020-11-05 22:54:36: (500) GET: /boards, query params: {}, request body: {}
2020-11-05 22:54:36: () DELETE: /boards/undefined, query params: {}, request body: {}, message: jwt malformed
2020-11-05 22:54:36: (500) DELETE: /boards/undefined, query params: {}, request body: {}
2020-11-05 22:54:36: () POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}, message: jwt malformed
2020-11-05 22:54:36: (500) POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}
2020-11-05 22:54:36: () POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}, message: jwt malformed
2020-11-05 22:54:36: (500) POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}
2020-11-05 22:54:36: () PUT: /boards/undefined, query params: {}, request body: {"0":"I","1":"n","2":"t","3":"e","4":"r","5":"n","6":"a","7":"l","8":" ","9":"S","10":"e","11":"r","12":"v","13":"e","14":"r","15":" ","16":"E","17":"r","18":"r","19":"o","20":"r","title":"Autotest updated board"}, message: jwt malformed
2020-11-05 22:54:36: (500) PUT: /boards/undefined, query params: {}, request body: {"0":"I","1":"n","2":"t","3":"e","4":"r","5":"n","6":"a","7":"l","8":" ","9":"S","10":"e","11":"r","12":"v","13":"e","14":"r","15":" ","16":"E","17":"r","18":"r","19":"o","20":"r","title":"Autotest updated board"}
2020-11-05 22:54:36: () POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}, message: jwt malformed
2020-11-05 22:54:36: (500) POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}
2020-11-05 22:54:36: () POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}, message: jwt malformed
2020-11-05 22:54:36: (500) POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}
2020-11-05 22:54:36: () DELETE: /boards/undefined, query params: {}, request body: {}, message: jwt malformed
2020-11-05 22:54:36: (500) DELETE: /boards/undefined, query params: {}, request body: {}
2020-11-05 22:54:36: (401) GET: /users, query params: {}, request body: {}
2020-11-05 22:54:36: (401) GET: /users/123, query params: {}, request body: {}
2020-11-05 22:54:36: (401) POST: /users, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}
2020-11-05 22:54:36: (401) PUT: /users/12345, query params: {}, request body: {"name":"TEST_USER","login":"test_user","password":"T35t_P@55w0rd"}
2020-11-05 22:54:36: (401) DELETE: /users/12345, query params: {}, request body: {}
2020-11-05 22:54:36: (401) GET: /boards, query params: {}, request body: {}
2020-11-05 22:54:37: (401) GET: /boards/12345, query params: {}, request body: {}
2020-11-05 22:54:37: (401) POST: /boards, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}
2020-11-05 22:54:37: (401) PUT: /boards/12345, query params: {}, request body: {"title":"Autotest board","columns":[{"title":"Backlog","order":1},{"title":"Sprint","order":2}]}
2020-11-05 22:54:37: (401) DELETE: /boards/12345, query params: {}, request body: {}
2020-11-05 22:54:37: (401) GET: /boards/12345/tasks, query params: {}, request body: {}
2020-11-05 22:54:37: (401) GET: /boards/12345/tasks/12345, query params: {}, request body: {}
2020-11-05 22:54:37: (401) POST: /boards/12345/tasks, query params: {}, request body: {"title":"Autotest task","order":0,"description":"Lorem ipsum","userId":null,"boardId":null,"columnId":null}
2020-11-05 22:54:37: (401) PUT: /boards/12345/tasks/12345, query params: {}, request body: {"title":"Autotest task","order":0,"description":"Lorem ipsum","userId":null,"boardId":null,"columnId":null}
2020-11-05 22:54:37: (401) DELETE: /boards/12345/tasks/12345, query params: {}, request body: {}
